// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: proto/Auth/Admin.proto

package admin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminPanelClient is the client API for AdminPanel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminPanelClient interface {
	AdminPermission(ctx context.Context, in *AdminPermissionRequest, opts ...grpc.CallOption) (*AdminPermissionResponse, error)
	AdminSettingsPanel(ctx context.Context, in *AdminSettiongsPanelRequest, opts ...grpc.CallOption) (*AdminSettingsPanelResponse, error)
	AdminListInformation(ctx context.Context, in *AdminListInformationRequest, opts ...grpc.CallOption) (*AdminListInformationsResponse, error)
}

type adminPanelClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminPanelClient(cc grpc.ClientConnInterface) AdminPanelClient {
	return &adminPanelClient{cc}
}

func (c *adminPanelClient) AdminPermission(ctx context.Context, in *AdminPermissionRequest, opts ...grpc.CallOption) (*AdminPermissionResponse, error) {
	out := new(AdminPermissionResponse)
	err := c.cc.Invoke(ctx, "/admin.AdminPanel/AdminPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelClient) AdminSettingsPanel(ctx context.Context, in *AdminSettiongsPanelRequest, opts ...grpc.CallOption) (*AdminSettingsPanelResponse, error) {
	out := new(AdminSettingsPanelResponse)
	err := c.cc.Invoke(ctx, "/admin.AdminPanel/AdminSettingsPanel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelClient) AdminListInformation(ctx context.Context, in *AdminListInformationRequest, opts ...grpc.CallOption) (*AdminListInformationsResponse, error) {
	out := new(AdminListInformationsResponse)
	err := c.cc.Invoke(ctx, "/admin.AdminPanel/AdminListInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminPanelServer is the server API for AdminPanel service.
// All implementations must embed UnimplementedAdminPanelServer
// for forward compatibility
type AdminPanelServer interface {
	AdminPermission(context.Context, *AdminPermissionRequest) (*AdminPermissionResponse, error)
	AdminSettingsPanel(context.Context, *AdminSettiongsPanelRequest) (*AdminSettingsPanelResponse, error)
	AdminListInformation(context.Context, *AdminListInformationRequest) (*AdminListInformationsResponse, error)
	mustEmbedUnimplementedAdminPanelServer()
}

// UnimplementedAdminPanelServer must be embedded to have forward compatible implementations.
type UnimplementedAdminPanelServer struct {
}

func (UnimplementedAdminPanelServer) AdminPermission(context.Context, *AdminPermissionRequest) (*AdminPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminPermission not implemented")
}
func (UnimplementedAdminPanelServer) AdminSettingsPanel(context.Context, *AdminSettiongsPanelRequest) (*AdminSettingsPanelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminSettingsPanel not implemented")
}
func (UnimplementedAdminPanelServer) AdminListInformation(context.Context, *AdminListInformationRequest) (*AdminListInformationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminListInformation not implemented")
}
func (UnimplementedAdminPanelServer) mustEmbedUnimplementedAdminPanelServer() {}

// UnsafeAdminPanelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminPanelServer will
// result in compilation errors.
type UnsafeAdminPanelServer interface {
	mustEmbedUnimplementedAdminPanelServer()
}

func RegisterAdminPanelServer(s grpc.ServiceRegistrar, srv AdminPanelServer) {
	s.RegisterService(&AdminPanel_ServiceDesc, srv)
}

func _AdminPanel_AdminPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).AdminPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminPanel/AdminPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).AdminPermission(ctx, req.(*AdminPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanel_AdminSettingsPanel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminSettiongsPanelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).AdminSettingsPanel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminPanel/AdminSettingsPanel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).AdminSettingsPanel(ctx, req.(*AdminSettiongsPanelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanel_AdminListInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminListInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).AdminListInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminPanel/AdminListInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).AdminListInformation(ctx, req.(*AdminListInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminPanel_ServiceDesc is the grpc.ServiceDesc for AdminPanel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminPanel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin.AdminPanel",
	HandlerType: (*AdminPanelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AdminPermission",
			Handler:    _AdminPanel_AdminPermission_Handler,
		},
		{
			MethodName: "AdminSettingsPanel",
			Handler:    _AdminPanel_AdminSettingsPanel_Handler,
		},
		{
			MethodName: "AdminListInformation",
			Handler:    _AdminPanel_AdminListInformation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/Auth/Admin.proto",
}
