// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: proto/Auth/Auth.proto

package auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthServerClient is the client API for AuthServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServerClient interface {
	AuthLogin(ctx context.Context, in *AuthLoginRequest, opts ...grpc.CallOption) (*AuthLoginResponse, error)
	AuthRegistration(ctx context.Context, in *AuthRegistrationRequest, opts ...grpc.CallOption) (*AuthRegistrationResponse, error)
	AuthRoles(ctx context.Context, in *AuthRolesRequest, opts ...grpc.CallOption) (*AuthRolesResponse, error)
}

type authServerClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServerClient(cc grpc.ClientConnInterface) AuthServerClient {
	return &authServerClient{cc}
}

func (c *authServerClient) AuthLogin(ctx context.Context, in *AuthLoginRequest, opts ...grpc.CallOption) (*AuthLoginResponse, error) {
	out := new(AuthLoginResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthServer/AuthLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServerClient) AuthRegistration(ctx context.Context, in *AuthRegistrationRequest, opts ...grpc.CallOption) (*AuthRegistrationResponse, error) {
	out := new(AuthRegistrationResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthServer/AuthRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServerClient) AuthRoles(ctx context.Context, in *AuthRolesRequest, opts ...grpc.CallOption) (*AuthRolesResponse, error) {
	out := new(AuthRolesResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthServer/AuthRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServerServer is the server API for AuthServer service.
// All implementations must embed UnimplementedAuthServerServer
// for forward compatibility
type AuthServerServer interface {
	AuthLogin(context.Context, *AuthLoginRequest) (*AuthLoginResponse, error)
	AuthRegistration(context.Context, *AuthRegistrationRequest) (*AuthRegistrationResponse, error)
	AuthRoles(context.Context, *AuthRolesRequest) (*AuthRolesResponse, error)
	mustEmbedUnimplementedAuthServerServer()
}

// UnimplementedAuthServerServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServerServer struct {
}

func (UnimplementedAuthServerServer) AuthLogin(context.Context, *AuthLoginRequest) (*AuthLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthLogin not implemented")
}
func (UnimplementedAuthServerServer) AuthRegistration(context.Context, *AuthRegistrationRequest) (*AuthRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthRegistration not implemented")
}
func (UnimplementedAuthServerServer) AuthRoles(context.Context, *AuthRolesRequest) (*AuthRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthRoles not implemented")
}
func (UnimplementedAuthServerServer) mustEmbedUnimplementedAuthServerServer() {}

// UnsafeAuthServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServerServer will
// result in compilation errors.
type UnsafeAuthServerServer interface {
	mustEmbedUnimplementedAuthServerServer()
}

func RegisterAuthServerServer(s grpc.ServiceRegistrar, srv AuthServerServer) {
	s.RegisterService(&AuthServer_ServiceDesc, srv)
}

func _AuthServer_AuthLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServerServer).AuthLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthServer/AuthLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServerServer).AuthLogin(ctx, req.(*AuthLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServer_AuthRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServerServer).AuthRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthServer/AuthRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServerServer).AuthRegistration(ctx, req.(*AuthRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServer_AuthRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServerServer).AuthRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthServer/AuthRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServerServer).AuthRoles(ctx, req.(*AuthRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthServer_ServiceDesc is the grpc.ServiceDesc for AuthServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AuthServer",
	HandlerType: (*AuthServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthLogin",
			Handler:    _AuthServer_AuthLogin_Handler,
		},
		{
			MethodName: "AuthRegistration",
			Handler:    _AuthServer_AuthRegistration_Handler,
		},
		{
			MethodName: "AuthRoles",
			Handler:    _AuthServer_AuthRoles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/Auth/Auth.proto",
}
